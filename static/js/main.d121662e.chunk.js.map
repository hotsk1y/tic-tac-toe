{"version":3,"sources":["components/Cell/Cell.jsx","components/Field/Field.jsx","components/Game/Game.jsx","healper.js","components/Menu/Menu.jsx","App.js","index.js"],"names":["Cell","props","className","onClick","handleClick","value","Field","cells","map","cell","i","Game","aiPlayer","isAgainstTheComputer","xIsRunMenu","xIsRun","setxIsRun","turn","setTurn","useState","Array","fill","field","setField","scoreX","setScoreX","scoreO","setScoreO","scoreDraw","setScoreDraw","humanPlayer","undefined","fieldWithIndex","slice","length","checkWinner","board","player","winner","win_lines","a","b","c","calculateWinner","useEffect","scoreDrawCopy","changeTheScore","searchAlgorithm","emptyCells","filter","s","findEmptyCells","score","moves","move","idx","payload","push","bestMove","bestScore","Infinity","index","fieldCopy","newTurn","fieldAfterPlayer","computerTurn","Menu","setMenuActive","setIsAgainstTheComputer","setxIsRunMenu","disabledInput","htmlFor","id","type","disabled","checked","onChange","e","target","App","menuActive","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d121662e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Cell.css'\r\n\r\nconst Cell = (props) => {\r\n  return(\r\n    <div className=\"cell\" onClick={props.handleClick}>\r\n      {props.value}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cell","import React from 'react'\r\nimport './Field.css'\r\nimport Cell from '../Cell/Cell'\r\n\r\nconst Field = ({cells, handleClick}) => {\r\n  return(\r\n    <div className=\"field\">\r\n      {\r\n        cells.map((cell, i) => {\r\n          return (\r\n            <Cell key={i} value={cell} handleClick={() => handleClick(i)} />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Field","import React, { useState, useEffect } from 'react'\r\nimport './Game.css'\r\nimport Field from '../Field/Field'\r\nimport { calculateWinner } from '../../healper'\r\n\r\nconst Game = ({ isAgainstTheComputer, xIsRunMenu, xIsRun, setxIsRun, turn, setTurn }) => {\r\n  const [field, setField] = useState(Array(9).fill(null))\r\n  const [scoreX, setScoreX] = useState(0)\r\n  const [scoreO, setScoreO] = useState(0)\r\n  const [scoreDraw, setScoreDraw] = useState(0)\r\n  let aiPlayer, humanPlayer = undefined\r\n\r\n  if (xIsRun) {\r\n    aiPlayer = 'O'\r\n    humanPlayer = 'X'\r\n  } else {\r\n    aiPlayer = 'X'\r\n    humanPlayer = 'O'\r\n  }\r\n\r\n  let fieldWithIndex = field.slice()\r\n  for (let i = 0; i < field.length; i++) {\r\n    if (fieldWithIndex[i] === null) {\r\n      fieldWithIndex[i] = i\r\n    }\r\n  }\r\n\r\n  const checkWinner = (board, player) => {\r\n    if (board[0] === player && board[1] === player && board[2] === player ||\r\n      board[3] === player && board[4] === player && board[5] === player ||\r\n      board[6] === player && board[7] === player && board[8] === player ||\r\n      board[0] === player && board[3] === player && board[6] === player ||\r\n      board[1] === player && board[4] === player && board[7] === player ||\r\n      board[2] === player && board[5] === player && board[8] === player ||\r\n      board[0] === player && board[4] === player && board[8] === player ||\r\n      board[2] === player && board[4] === player && board[6] === player) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const findEmptyCells = (board) => {\r\n    return board.filter(s => s != \"O\" && s != \"X\");\r\n  }\r\n\r\n  let winner = calculateWinner(field)\r\n\r\n  const changeTheScore = () => {\r\n    if (winner === 'X') {\r\n      setScoreX(scoreX + 1)\r\n    } else if (winner === 'O') {\r\n      setScoreO(scoreO + 1)\r\n    }\r\n    if (turn.length === 9 && !winner) {\r\n      let scoreDrawCopy = scoreDraw\r\n      scoreDrawCopy++\r\n      setScoreDraw(scoreDrawCopy)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    changeTheScore()\r\n  }, [turn.length, winner])\r\n\r\n\r\n  const handleClick = index => {\r\n    const fieldCopy = [...field]\r\n    // ?game-over, ?click\r\n    if (winner || fieldCopy[index]) {\r\n      return null\r\n    }\r\n    // X ? Y\r\n    fieldCopy[index] = xIsRun ? 'X' : 'O'\r\n    // update state\r\n    setField(fieldCopy)\r\n    setxIsRun(!xIsRun)\r\n\r\n    const newTurn = turn\r\n    newTurn.push(fieldCopy[index])\r\n    setTurn(newTurn)\r\n  }\r\n\r\n  const computerTurn = (fieldAfterPlayer) => {\r\n    let fieldCopy = [...fieldAfterPlayer]    \r\n    let newTurn = turn\r\n    \r\n    fieldWithIndex = [...fieldCopy]\r\n    for (let i = 0; i < fieldCopy.length; i++) {\r\n      if (fieldCopy[i] === null) {\r\n        fieldWithIndex[i] = i\r\n      }\r\n    }\r\n\r\n    let bestMove = searchAlgorithm(fieldWithIndex, aiPlayer)\r\n    if (winner || fieldCopy[bestMove.idx]) return null\r\n\r\n    fieldCopy[bestMove.idx] = !xIsRun ? 'X' : 'O'\r\n    setField(fieldCopy)\r\n    newTurn.push(fieldCopy[bestMove.idx])\r\n    // setTurn(newTurn)\r\n  }\r\n\r\n  const playerTurn = (index) => {\r\n    let fieldCopy = [...field]\r\n    let newTurn = turn\r\n    // ?game-over, ?click\r\n    if (winner || fieldCopy[index]) return null\r\n    // X ? Y\r\n    fieldCopy[index] = xIsRun ? 'X' : 'O'\r\n    setField(fieldCopy)\r\n    newTurn.push(fieldCopy[index])\r\n    // setTurn(newTurn)\r\n\r\n    if (newTurn.length === 9) {\r\n      if (winner) {\r\n        return null\r\n      }\r\n    } else {\r\n      computerTurn(fieldCopy)\r\n    }\r\n  }\r\n\r\n  const searchAlgorithm = (board, player) => {\r\n    const emptyCells = findEmptyCells(board)\r\n    if (checkWinner(board, humanPlayer)) {\r\n      return { score: -1 }\r\n    } else if (checkWinner(board, aiPlayer)) {\r\n      return { score: 1 }\r\n    } else if (emptyCells.length === 0) {\r\n      return { score: 0 }\r\n    }\r\n\r\n    let moves = []\r\n\r\n    for (let i = 0; i < emptyCells.length; i++) {\r\n      let move = []\r\n      board[emptyCells[i]] = player\r\n      move.idx = emptyCells[i]\r\n      if (player === humanPlayer) {\r\n        const payload = searchAlgorithm(board, aiPlayer)\r\n        move.score = payload.score\r\n      }\r\n      if (player === aiPlayer) {\r\n        const payload = searchAlgorithm(board, humanPlayer)\r\n        move.score = payload.score\r\n      }\r\n      board[emptyCells[i]] = move.idx\r\n      moves.push(move)\r\n    }\r\n\r\n    let bestMove = null\r\n\r\n    if (player === aiPlayer) {\r\n      let bestScore = -Infinity\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    } else {\r\n      let bestScore = Infinity\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    }\r\n\r\n    return moves[bestMove]\r\n  }\r\n\r\n  return (\r\n    <div className='game-wrapper'>\r\n      <div className=\"score\">\r\n        <div className=\"score_descr\">\r\n          <div>X</div>\r\n          <div>Draw</div>\r\n          <div>O</div>\r\n        </div>\r\n        <div className=\"score_item\">\r\n          <div>{scoreX}</div>\r\n          <div>{scoreDraw}</div>\r\n          <div>{scoreO}</div>\r\n        </div>\r\n      </div>\r\n      <button className='start-game__btn'\r\n        onClick={() =>\r\n          setField(Array(9).fill(null),\r\n            setTurn([]),\r\n            setxIsRun(xIsRunMenu)\r\n          )}>Start New Game</button>\r\n      <Field cells={field} handleClick={isAgainstTheComputer ? playerTurn : handleClick} />\r\n      <p className=\"field__info\">\r\n        {\r\n          winner\r\n            ? `${winner} is the winner!`\r\n            : (turn.length === 9 ? `Draw!` : `Your turn: ${xIsRun ? 'X' : 'O'}`)\r\n        }\r\n      </p>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Game","export const calculateWinner = (cells) => {\n  const win_lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < win_lines.length; i++) {\n    const [a, b, c] = win_lines[i];\n    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n      return cells[a];\n    }\n  }\n  return null;\n};\n","import React from 'react'\r\nimport './Menu.css'\r\n\r\nconst Menu = ({ setMenuActive,\r\n  isAgainstTheComputer,\r\n  setIsAgainstTheComputer,\r\n  setxIsRun,\r\n  xIsRunMenu,\r\n  setxIsRunMenu,\r\n  disabledInput\r\n}) => {\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"close-menu__btn\" onClick={() => setMenuActive(false)}>X</div>\r\n      <div className=\"main-menu__content\">\r\n        <div className=\"title\"><h1>Tic Tac Toe Settings</h1></div>        \r\n        <div className=\"content-item chekbox-content__item\">\r\n          <label htmlFor=\"computerTurn\">Player VS Bot: </label>\r\n          <input id=\"computerTurn\" type=\"checkbox\" disabled={disabledInput} checked={isAgainstTheComputer} onChange={(e) =>\r\n            setIsAgainstTheComputer(e.target.checked)} />\r\n        </div>\r\n        <div className=\"content-item chekbox-content__item\">\r\n          <label htmlFor=\"xIsRun\">X runs first: </label>\r\n          <input className='chekbox-content__item' id=\"xIsRun\" type=\"checkbox\"\r\n            disabled={disabledInput}\r\n            checked={xIsRunMenu}\r\n            onChange={(e) => {\r\n              setxIsRunMenu(e.target.checked)\r\n              setxIsRun(e.target.checked)\r\n            }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu","import React, { useState } from 'react'\nimport './App.css'\nimport Game from './components/Game/Game'\nimport Menu from './components/Menu/Menu'\n\nfunction App() {\n  const [menuActive, setMenuActive] = useState(false)\n  const [isAgainstTheComputer, setIsAgainstTheComputer] = useState(true)\n  const [xIsRunMenu, setxIsRunMenu] = useState(true)\n  const [xIsRun, setxIsRun] = useState(xIsRunMenu)\n  const [turn, setTurn] = useState([])\n\n  let disabledInput = false;\n  if (turn.length >= 1) {\n    disabledInput = true\n  } else {\n    disabledInput = false\n  }\n\n  return (\n    <div className=\"main-page\">\n      <div className=\"menu__settings-logo\" onClick={() => setMenuActive(!menuActive)}>\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Settings_app_icon.png/768px-Windows_Settings_app_icon.png\" alt=\"\" />\n      </div>\n      <div className={menuActive ? 'main-menu active' : 'main-menu'}>\n        <Menu\n          menuActive={menuActive}\n          disabledInput={disabledInput}\n          setMenuActive={setMenuActive}\n          setIsAgainstTheComputer={setIsAgainstTheComputer}\n          isAgainstTheComputer={isAgainstTheComputer}\n          xIsRunMenu={xIsRunMenu}\n          setxIsRunMenu={setxIsRunMenu}\n          xIsRun={xIsRun}\n          setxIsRun={setxIsRun}\n        />\n      </div>\n      <Game\n        isAgainstTheComputer={isAgainstTheComputer}\n        xIsRunMenu={xIsRunMenu}\n        xIsRun={xIsRun}\n        setxIsRun={setxIsRun}\n        turn={turn}\n        setTurn={setTurn}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}