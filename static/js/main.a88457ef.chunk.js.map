{"version":3,"sources":["components/Cell/Cell.jsx","components/Field/Field.jsx","store/reducers/fieldReducer.js","components/Game/Game.jsx","healper.js","components/Menu/Menu.jsx","store/reducers/scoreReducer.js","store/reducers/settingsReducer.js","App.js","store/reducers/rootReducer.js","store/store.js","index.js"],"names":["Cell","props","className","onClick","handleClick","value","Field","cells","map","cell","i","defaultFieldState","field","Array","fill","START_NEW_GAME","CHANGE_FIELD","Game","aiPlayer","dispatch","isAgainstTheComputer","xIsRunMenu","xIsRun","setxIsRun","turn","setTurn","setScoreX","setScoreO","setScoreDraw","scoreX","scoreO","scoreDraw","useSelector","state","startNewGame","payload","type","setField","player","index","changeFieldAction","humanPlayer","undefined","fieldWithIndex","length","checkWinner","board","winner","win_lines","a","b","c","calculateWinner","useEffect","searchAlgorithm","emptyCells","filter","s","findEmptyCells","score","moves","move","idx","push","bestMove","bestScore","Infinity","fieldCopy","newTurn","fieldAfterPlayer","computerTurn","Menu","disabledInput","setMenuActive","setIsAgainstTheComputer","setxIsRunMenu","resetScore","htmlFor","id","disabled","checked","onChange","e","target","defaultScoreState","draw","ADD_X","ADD_O","ADD_DRAW","RESET_SCORE","defaultState","menuActive","BOT_ACTIVE","MENU_ACTIVE","X_IS_RUN_MENU","X_IS_RUN","SET_TURN","App","useDispatch","settings","setMenuActiveAction","setTurnAction","setxIsRunAction","src","alt","setIsAgainstTheComputerAction","setxIsRunMenuAction","rootReducer","combineReducers","action","newField","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a88457ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Cell.css'\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div className=\"cell\" onClick={props.handleClick}>\r\n      {props.value}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cell\r\n","import React from 'react'\r\nimport './Field.css'\r\nimport Cell from '../Cell/Cell'\r\n\r\nconst Field = ({ cells, handleClick }) => {\r\n  return (\r\n    <div className=\"field\">\r\n      {cells.map((cell, i) => {\r\n        return <Cell key={i} value={cell} handleClick={() => handleClick(i)} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Field\r\n","/* eslint-disable no-case-declarations */\r\n/* eslint-disable indent */\r\nconst defaultFieldState = {\r\n  field: Array(9).fill(null),\r\n}\r\n\r\nexport const START_NEW_GAME = 'START_NEW_GAME'\r\nexport const CHANGE_FIELD = 'CHANGE_FIELD'\r\n\r\nexport const fieldReducer = (state = defaultFieldState, action) => {\r\n  switch (action.type) {\r\n    case START_NEW_GAME:\r\n      return { ...state, field: defaultFieldState.field }\r\n\r\n    case CHANGE_FIELD:\r\n      let newField = [...state.field]\r\n      newField[action.index] = action.payload\r\n      return { ...state, field: newField }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const startNewGameAction = (payload) => ({\r\n  type: START_NEW_GAME,\r\n  payload,\r\n})\r\n\r\nexport const changeFieldAction = (payload, index) => ({\r\n  type: CHANGE_FIELD,\r\n  payload,\r\n  index,\r\n})\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './Game.css'\r\nimport Field from '../Field/Field'\r\nimport { calculateWinner } from '../../healper'\r\n\r\nimport {\r\n  startNewGameAction,\r\n  changeFieldAction,\r\n} from '../../store/reducers/fieldReducer'\r\n\r\nconst Game = ({\r\n  dispatch,\r\n  isAgainstTheComputer,\r\n  xIsRunMenu,\r\n  xIsRun,\r\n  setxIsRun,\r\n  turn,\r\n  setTurn,\r\n  setScoreX,\r\n  setScoreO,\r\n  setScoreDraw,\r\n  scoreX,\r\n  scoreO,\r\n  scoreDraw,\r\n}) => {\r\n  const field = useSelector((state) => state.field.field)\r\n  const startNewGame = () => {\r\n    setxIsRun(xIsRunMenu)\r\n    setTurn([])\r\n    dispatch(startNewGameAction())\r\n  }\r\n  const setField = (player, index) => {\r\n    dispatch(changeFieldAction(player, index))\r\n  }\r\n\r\n  let aiPlayer,\r\n    humanPlayer = undefined\r\n\r\n  if (xIsRun) {\r\n    aiPlayer = 'O'\r\n    humanPlayer = 'X'\r\n  } else {\r\n    aiPlayer = 'X'\r\n    humanPlayer = 'O'\r\n  }\r\n\r\n  let fieldWithIndex = [...field]\r\n  for (let i = 0; i < fieldWithIndex.length; i++) {\r\n    if (fieldWithIndex[i] === null) {\r\n      fieldWithIndex[i] = i\r\n    }\r\n  }\r\n\r\n  const checkWinner = (board, player) => {\r\n    if (\r\n      (board[0] === player && board[1] === player && board[2] === player) ||\r\n      (board[3] === player && board[4] === player && board[5] === player) ||\r\n      (board[6] === player && board[7] === player && board[8] === player) ||\r\n      (board[0] === player && board[3] === player && board[6] === player) ||\r\n      (board[1] === player && board[4] === player && board[7] === player) ||\r\n      (board[2] === player && board[5] === player && board[8] === player) ||\r\n      (board[0] === player && board[4] === player && board[8] === player) ||\r\n      (board[2] === player && board[4] === player && board[6] === player)\r\n    ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const findEmptyCells = (board) => {\r\n    return board.filter((s) => s != 'O' && s != 'X')\r\n  }\r\n\r\n  let winner = calculateWinner(field)\r\n\r\n  const changeTheScore = () => {\r\n    if (winner === 'X') {\r\n      setScoreX()\r\n    } else if (winner === 'O') {\r\n      setScoreO()\r\n    }\r\n    if (turn.length === 9 && !winner) {\r\n      setScoreDraw()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    changeTheScore()\r\n  }, [turn.length, winner])\r\n\r\n  const handleClick = (index) => {\r\n    const fieldCopy = [...field]\r\n    // ?game-over, ?click\r\n    if (winner || fieldCopy[index]) {\r\n      return null\r\n    }\r\n    // X ? Y\r\n    let player = xIsRun ? 'X' : 'O'\r\n    // update state\r\n    setField(player, index)\r\n    setxIsRun(!xIsRun)\r\n\r\n    const newTurn = turn\r\n    newTurn.push(fieldCopy[index])\r\n    setTurn(newTurn)\r\n  }\r\n\r\n  const computerTurn = (fieldAfterPlayer) => {\r\n    let fieldCopy = [...fieldAfterPlayer]\r\n    let newTurn = turn\r\n\r\n    fieldWithIndex = [...fieldCopy]\r\n    for (let i = 0; i < fieldCopy.length; i++) {\r\n      if (fieldCopy[i] === null) {\r\n        fieldWithIndex[i] = i\r\n      }\r\n    }\r\n\r\n    let bestMove = searchAlgorithm(fieldWithIndex, aiPlayer)\r\n    if (winner || fieldCopy[bestMove.idx]) return null\r\n\r\n    fieldCopy[bestMove.idx] = !xIsRun ? 'X' : 'O'\r\n    setField(aiPlayer, bestMove.idx)\r\n    newTurn.push(fieldCopy[bestMove.idx])\r\n    setTurn(newTurn)\r\n  }\r\n\r\n  const playerTurn = (index) => {\r\n    let fieldCopy = [...field]\r\n    let newTurn = turn\r\n    // ?game-over, ?click\r\n    if (winner || fieldCopy[index]) return null\r\n    // X ? Y\r\n    fieldCopy[index] = xIsRun ? 'X' : 'O'\r\n    setField(humanPlayer, index)\r\n    newTurn.push(fieldCopy[index])\r\n    setTurn(newTurn)\r\n\r\n    if (newTurn.length === 9) {\r\n      if (winner) {\r\n        return null\r\n      }\r\n    } else {\r\n      computerTurn(fieldCopy)\r\n    }\r\n  }\r\n\r\n  const searchAlgorithm = (board, player) => {\r\n    const emptyCells = findEmptyCells(board)\r\n    if (checkWinner(board, humanPlayer)) {\r\n      return { score: -1 }\r\n    } else if (checkWinner(board, aiPlayer)) {\r\n      return { score: 1 }\r\n    } else if (emptyCells.length === 0) {\r\n      return { score: 0 }\r\n    }\r\n\r\n    let moves = []\r\n\r\n    for (let i = 0; i < emptyCells.length; i++) {\r\n      let move = []\r\n      board[emptyCells[i]] = player\r\n      move.idx = emptyCells[i]\r\n      if (player === humanPlayer) {\r\n        const payload = searchAlgorithm(board, aiPlayer)\r\n        move.score = payload.score\r\n      }\r\n      if (player === aiPlayer) {\r\n        const payload = searchAlgorithm(board, humanPlayer)\r\n        move.score = payload.score\r\n      }\r\n      board[emptyCells[i]] = move.idx\r\n      moves.push(move)\r\n    }\r\n\r\n    let bestMove = null\r\n\r\n    if (player === aiPlayer) {\r\n      let bestScore = -Infinity\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    } else {\r\n      let bestScore = Infinity\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    }\r\n\r\n    return moves[bestMove]\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      <div className=\"score\">\r\n        <div className=\"score_descr\">\r\n          <div>X</div>\r\n          <div>Draw</div>\r\n          <div>O</div>\r\n        </div>\r\n        <div className=\"score_item\">\r\n          <div>{scoreX}</div>\r\n          <div>{scoreDraw}</div>\r\n          <div>{scoreO}</div>\r\n        </div>\r\n      </div>\r\n      <button className=\"start-game__btn\" onClick={() => startNewGame()}>\r\n        Start New Game\r\n      </button>\r\n      <Field\r\n        cells={field}\r\n        handleClick={isAgainstTheComputer ? playerTurn : handleClick}\r\n      />\r\n      <p className=\"field__info\">\r\n        {winner\r\n          ? `${winner} is the winner!`\r\n          : turn.length === 9\r\n            ? 'Draw!'\r\n            : `Your turn: ${xIsRun ? 'X' : 'O'}`}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","export const calculateWinner = (cells) => {\n  const win_lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < win_lines.length; i++) {\n    const [a, b, c] = win_lines[i]\n    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n      return cells[a]\n    }\n  }\n  return null\n}\n","import React from 'react'\r\nimport './Menu.css'\r\n\r\nconst Menu = ({\r\n  disabledInput,\r\n  setMenuActive,\r\n  isAgainstTheComputer,\r\n  setIsAgainstTheComputer,\r\n  xIsRunMenu,\r\n  setxIsRunMenu,\r\n  setxIsRun,\r\n  setTurn,\r\n  resetScore,\r\n}) => {\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"close-menu__btn\" onClick={() => setMenuActive(false)}>\r\n        X\r\n      </div>\r\n      <div className=\"main-menu__content\">\r\n        <div className=\"title\">\r\n          <h1>Tic Tac Toe Settings</h1>\r\n        </div>\r\n        {disabledInput ? (\r\n          <div className=\"apply-changes\">\r\n            Please, start a new game to change the settings\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <div className=\"content-item chekbox-content__item\">\r\n          <label htmlFor=\"computerTurn\">Player VS Bot: </label>\r\n          <input\r\n            id=\"computerTurn\"\r\n            type=\"checkbox\"\r\n            disabled={disabledInput}\r\n            checked={isAgainstTheComputer}\r\n            onChange={(e) => {\r\n              setIsAgainstTheComputer(e.target.checked)\r\n              setTurn([])\r\n              resetScore()\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"content-item chekbox-content__item\">\r\n          <label htmlFor=\"xIsRun\">X runs first: </label>\r\n          <input\r\n            className=\"chekbox-content__item\"\r\n            id=\"xIsRun\"\r\n            type=\"checkbox\"\r\n            disabled={disabledInput}\r\n            checked={xIsRunMenu}\r\n            onChange={(e) => {\r\n              setxIsRunMenu(e.target.checked)\r\n              setxIsRun(e.target.checked)\r\n              resetScore()\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","/* eslint-disable indent */\r\nconst defaultScoreState = {\r\n  draw: 0,\r\n  scoreX: 0,\r\n  scoreO: 0,\r\n}\r\n\r\nexport const ADD_X = 'ADD_X'\r\nexport const ADD_O = 'ADD_O'\r\nexport const ADD_DRAW = 'ADD_DRAW'\r\nexport const RESET_SCORE = 'RESET_SCORE'\r\n\r\nexport const scoreReducer = (state = defaultScoreState, action) => {\r\n  switch (action.type) {\r\n    case ADD_X:\r\n      return { ...state, scoreX: state.scoreX + 1 }\r\n    case ADD_O:\r\n      return { ...state, scoreO: state.scoreO + 1 }\r\n    case ADD_DRAW:\r\n      return { ...state, draw: state.draw + 1 }\r\n    case RESET_SCORE:\r\n      return { ...state, draw: state.draw = 0, scoreX: 0, scoreO: 0 }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setScoreDrawAction = (payload) => ({\r\n  type: ADD_DRAW,\r\n  payload,\r\n})\r\n\r\nexport const setScoreXAction = (payload) => ({\r\n  type: ADD_X,\r\n  payload,\r\n})\r\n\r\nexport const setScoreOAction = (payload) => ({\r\n  type: ADD_O,\r\n  payload,\r\n})\r\n\r\nexport const resetScoreAction = (payload) => ({\r\n  type: RESET_SCORE,\r\n  payload,\r\n})\r\n","/* eslint-disable indent */\r\nconst defaultState = {\r\n  isAgainstTheComputer: true,\r\n  menuActive: false,\r\n  xIsRunMenu: true,\r\n  xIsRun: true,\r\n  turn: []\r\n}\r\n\r\nexport const BOT_ACTIVE = 'BOT_ACTIVE'\r\nexport const MENU_ACTIVE = 'MENU_ACTIVE'\r\nexport const X_IS_RUN_MENU = 'X_IS_RUN_MENU'\r\nexport const X_IS_RUN = 'X_IS_RUN'\r\nexport const SET_TURN = 'SET_TURN'\r\n\r\nexport const settingsReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case BOT_ACTIVE:\r\n      return { ...state, isAgainstTheComputer: action.payload }\r\n\r\n    case MENU_ACTIVE:\r\n      return { ...state, menuActive: action.payload }\r\n\r\n    case X_IS_RUN_MENU:\r\n      return { ...state, xIsRunMenu: action.payload }\r\n\r\n    case X_IS_RUN:\r\n      return { ...state, xIsRun: action.payload }\r\n\r\n    case SET_TURN:\r\n      return { ...state, turn: action.payload }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setIsAgainstTheComputerAction = (payload) => ({\r\n  type: BOT_ACTIVE,\r\n  payload\r\n})\r\n\r\nexport const setMenuActiveAction = (payload) => ({\r\n  type: MENU_ACTIVE,\r\n  payload\r\n})\r\n\r\nexport const setxIsRunMenuAction = (payload) => ({\r\n  type: X_IS_RUN_MENU,\r\n  payload\r\n})\r\n\r\nexport const setTurnAction = (payload) => ({\r\n  type: SET_TURN,\r\n  payload\r\n})\r\n\r\nexport const setxIsRunAction = (payload) => ({\r\n  type: X_IS_RUN,\r\n  payload\r\n})","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './App.css'\n\nimport Game from './components/Game/Game'\nimport Menu from './components/Menu/Menu'\nimport {\n  setScoreDrawAction,\n  setScoreXAction,\n  setScoreOAction,\n  resetScoreAction,\n} from './store/reducers/scoreReducer'\n\nimport {\n  setIsAgainstTheComputerAction,\n  setMenuActiveAction,\n  setxIsRunMenuAction,\n  setTurnAction,\n  setxIsRunAction,\n} from './store/reducers/settingsReducer'\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  const isAgainstTheComputer = useSelector(\n    (state) => state.settings.isAgainstTheComputer\n  )\n  const setIsAgainstTheComputer = (payload) => {\n    dispatch(setIsAgainstTheComputerAction(payload))\n  }\n\n  const menuActive = useSelector((state) => state.settings.menuActive)\n  const setMenuActive = (payload) => {\n    dispatch(setMenuActiveAction(payload))\n  }\n\n  const xIsRunMenu = useSelector((state) => state.settings.xIsRunMenu)\n  const setxIsRunMenu = (payload) => {\n    dispatch(setxIsRunMenuAction(payload))\n  }\n\n  const turn = useSelector((state) => state.settings.turn)\n  const setTurn = (payload) => {\n    dispatch(setTurnAction(payload))\n  }\n\n  const xIsRun = useSelector((state) => state.settings.xIsRun)\n  const setxIsRun = (payload) => {\n    dispatch(setxIsRunAction(payload))\n  }\n\n  let disabledInput = false\n  if (turn.length >= 1) {\n    disabledInput = true\n  } else {\n    disabledInput = false\n  }\n\n  const scoreDraw = useSelector((state) => state.score.draw)\n  const setScoreDraw = () => {\n    dispatch(setScoreDrawAction())\n  }\n\n  const scoreX = useSelector((state) => state.score.scoreX)\n  const setScoreX = () => {\n    dispatch(setScoreXAction())\n  }\n\n  const scoreO = useSelector((state) => state.score.scoreO)\n  const setScoreO = () => {\n    dispatch(setScoreOAction())\n  }\n\n  const resetScore = () => {\n    dispatch(resetScoreAction())\n  }\n\n  return (\n    <div className=\"main-page\">\n      <div\n        className=\"menu__settings-logo\"\n        onClick={() => setMenuActive(!menuActive)}\n      >\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Settings_app_icon.png/768px-Windows_Settings_app_icon.png\"\n          alt=\"\"\n        />\n      </div>\n      <div className={menuActive ? 'main-menu active' : 'main-menu'}>\n        <Menu\n          disabledInput={disabledInput}\n          setMenuActive={setMenuActive}\n          isAgainstTheComputer={isAgainstTheComputer}\n          setIsAgainstTheComputer={setIsAgainstTheComputer}\n          xIsRunMenu={xIsRunMenu}\n          setxIsRunMenu={setxIsRunMenu}\n          setxIsRun={setxIsRun}\n          setTurn={setTurn}\n          resetScore={resetScore}\n        />\n      </div>\n      <Game\n        dispatch={dispatch}\n        isAgainstTheComputer={isAgainstTheComputer}\n        xIsRunMenu={xIsRunMenu}\n        xIsRun={xIsRun}\n        setxIsRun={setxIsRun}\n        turn={turn}\n        setTurn={setTurn}\n        scoreDraw={scoreDraw}\n        setScoreDraw={setScoreDraw}\n        scoreX={scoreX}\n        setScoreX={setScoreX}\n        scoreO={scoreO}\n        setScoreO={setScoreO}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\n\r\nimport { scoreReducer } from './scoreReducer'\r\nimport { settingsReducer } from './settingsReducer'\r\nimport { fieldReducer } from './fieldReducer'\r\n\r\nexport const rootReducer =  combineReducers({\r\n  score: scoreReducer,\r\n  settings: settingsReducer,\r\n  field: fieldReducer,\r\n})","import { createStore } from 'redux'\r\nimport { rootReducer } from './reducers/rootReducer'\r\n\r\nexport const store = createStore(rootReducer)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}