{"version":3,"sources":["components/Cell/Cell.jsx","components/Field/Field.jsx","store/reducers/fieldReducer.js","store/reducers/settingsReducer.js","store/reducers/scoreReducer.js","components/Game/Game.jsx","components/Menu/Menu.jsx","App.js","store/reducers/rootReducer.js","store/store.js","index.js"],"names":["Cell","props","className","onClick","handleClick","value","Field","cells","map","cell","i","defaultFieldState","field","Array","fill","START_NEW_GAME","CHANGE_FIELD","startNewGameAction","payload","type","defaultState","isAgainstTheComputer","menuActive","xIsRunMenu","xIsRun","turn","BOT_ACTIVE","MENU_ACTIVE","X_IS_RUN_MENU","X_IS_RUN","SET_TURN","setMenuActiveAction","setTurnAction","setxIsRunAction","defaultScoreState","draw","scoreX","scoreO","ADD_X","ADD_O","ADD_DRAW","RESET_SCORE","Game","disabledInput","aiPlayer","dispatch","useDispatch","useSelector","state","settings","setxIsRun","setTurn","setField","player","index","changeFieldAction","scoreDraw","score","setScoreDraw","setScoreX","setScoreO","humanPlayer","undefined","fieldWithIndex","length","checkWinner","board","winner","computerRandomTurn","Math","floor","random","fieldCopy","newTurn","push","useEffect","searchAlgorithm","emptyCells","filter","s","findEmptyCells","moves","move","idx","bestMove","bestScore","Infinity","fieldAfterPlayer","computerTurn","Menu","setIsAgainstTheComputer","setIsAgainstTheComputerAction","setxIsRunMenu","setxIsRunMenuAction","resetScore","startNewGame","htmlFor","id","disabled","checked","onChange","e","target","App","src","alt","rootReducer","combineReducers","action","newField","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91004426.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Cell.css'\r\n\r\nconst Cell = (props) => {\r\n  return (\r\n    <div className=\"cell\" onClick={props.handleClick}>\r\n      {props.value}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cell\r\n","import React from 'react'\r\nimport './Field.css'\r\nimport Cell from '../Cell/Cell'\r\n\r\nconst Field = ({ cells, handleClick }) => {\r\n  return (\r\n    <div className=\"field\">\r\n      {cells.map((cell, i) => {\r\n        return <Cell key={i} value={cell} handleClick={() => handleClick(i)} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Field\r\n","const defaultFieldState = {\r\n  field: Array(9).fill(null),\r\n}\r\n\r\nexport const START_NEW_GAME = 'START_NEW_GAME'\r\nexport const CHANGE_FIELD = 'CHANGE_FIELD'\r\n\r\nexport const fieldReducer = (state = defaultFieldState, action) => {\r\n  switch (action.type) {\r\n  case START_NEW_GAME:\r\n    return { ...state, field: defaultFieldState.field }\r\n\r\n  case CHANGE_FIELD: {\r\n    let newField = [...state.field]\r\n    newField[action.index] = action.payload\r\n    return { ...state, field: newField }\r\n  }\r\n\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nexport const startNewGameAction = (payload) => ({\r\n  type: START_NEW_GAME,\r\n  payload,\r\n})\r\n\r\nexport const changeFieldAction = (payload, index) => ({\r\n  type: CHANGE_FIELD,\r\n  payload,\r\n  index,\r\n})\r\n","const defaultState = {\r\n  isAgainstTheComputer: true,\r\n  menuActive: false,\r\n  xIsRunMenu: true,\r\n  xIsRun: true,\r\n  turn: [],\r\n}\r\n\r\nexport const BOT_ACTIVE = 'BOT_ACTIVE'\r\nexport const MENU_ACTIVE = 'MENU_ACTIVE'\r\nexport const X_IS_RUN_MENU = 'X_IS_RUN_MENU'\r\nexport const X_IS_RUN = 'X_IS_RUN'\r\nexport const SET_TURN = 'SET_TURN'\r\n\r\nexport const settingsReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n  case BOT_ACTIVE:\r\n    return { ...state, isAgainstTheComputer: action.payload }\r\n\r\n  case MENU_ACTIVE:\r\n    return { ...state, menuActive: action.payload }\r\n\r\n  case X_IS_RUN_MENU:\r\n    return { ...state, xIsRunMenu: action.payload }\r\n\r\n  case X_IS_RUN:\r\n    return { ...state, xIsRun: action.payload }\r\n\r\n  case SET_TURN:\r\n    return { ...state, turn: action.payload }\r\n\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nexport const setIsAgainstTheComputerAction = (payload) => ({\r\n  type: BOT_ACTIVE,\r\n  payload,\r\n})\r\n\r\nexport const setMenuActiveAction = (payload) => ({\r\n  type: MENU_ACTIVE,\r\n  payload,\r\n})\r\n\r\nexport const setxIsRunMenuAction = (payload) => ({\r\n  type: X_IS_RUN_MENU,\r\n  payload,\r\n})\r\n\r\nexport const setTurnAction = (payload) => ({\r\n  type: SET_TURN,\r\n  payload,\r\n})\r\n\r\nexport const setxIsRunAction = (payload) => ({\r\n  type: X_IS_RUN,\r\n  payload,\r\n})\r\n","const defaultScoreState = {\r\n  draw: 0,\r\n  scoreX: 0,\r\n  scoreO: 0,\r\n}\r\n\r\nexport const ADD_X = 'ADD_X'\r\nexport const ADD_O = 'ADD_O'\r\nexport const ADD_DRAW = 'ADD_DRAW'\r\nexport const RESET_SCORE = 'RESET_SCORE'\r\n\r\nexport const scoreReducer = (state = defaultScoreState, action) => {\r\n  switch (action.type) {\r\n  case ADD_X:\r\n    return { ...state, scoreX: state.scoreX + 1 }\r\n  case ADD_O:\r\n    return { ...state, scoreO: state.scoreO + 1 }\r\n  case ADD_DRAW:\r\n    return { ...state, draw: state.draw + 1 }\r\n  case RESET_SCORE:\r\n    return { ...state, draw: (state.draw = 0), scoreX: 0, scoreO: 0 }\r\n\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nexport const setScoreDrawAction = (payload) => ({\r\n  type: ADD_DRAW,\r\n  payload,\r\n})\r\n\r\nexport const setScoreXAction = (payload) => ({\r\n  type: ADD_X,\r\n  payload,\r\n})\r\n\r\nexport const setScoreOAction = (payload) => ({\r\n  type: ADD_O,\r\n  payload,\r\n})\r\n\r\nexport const resetScoreAction = (payload) => ({\r\n  type: RESET_SCORE,\r\n  payload,\r\n})\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport './Game.css'\r\nimport Field from '../Field/Field'\r\n\r\nimport {\r\n  startNewGameAction,\r\n  changeFieldAction,\r\n} from '../../store/reducers/fieldReducer'\r\n\r\nimport {\r\n  setTurnAction,\r\n  setxIsRunAction,\r\n} from '../../store/reducers/settingsReducer'\r\n\r\nimport {\r\n  setScoreDrawAction,\r\n  setScoreXAction,\r\n  setScoreOAction,\r\n} from '../../store/reducers/scoreReducer'\r\n\r\nconst Game = ({ disabledInput }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const xIsRunMenu = useSelector((state) => state.settings.xIsRunMenu)\r\n\r\n  const xIsRun = useSelector((state) => state.settings.xIsRun)\r\n  const setxIsRun = (payload) => {\r\n    dispatch(setxIsRunAction(payload))\r\n  }\r\n\r\n  const turn = useSelector((state) => state.settings.turn)\r\n  const setTurn = (payload) => {\r\n    dispatch(setTurnAction(payload))\r\n  }\r\n\r\n  const field = useSelector((state) => state.field.field)\r\n  const startNewGame = () => {\r\n    setxIsRun(xIsRunMenu)\r\n    setTurn([])\r\n    dispatch(startNewGameAction())\r\n  }\r\n  const setField = (player, index) => {\r\n    dispatch(changeFieldAction(player, index))\r\n  }\r\n\r\n  const isAgainstTheComputer = useSelector(\r\n    (state) => state.settings.isAgainstTheComputer\r\n  )\r\n\r\n  const scoreDraw = useSelector((state) => state.score.draw)\r\n  const setScoreDraw = () => {\r\n    dispatch(setScoreDrawAction())\r\n  }\r\n\r\n  const scoreX = useSelector((state) => state.score.scoreX)\r\n  const setScoreX = () => {\r\n    dispatch(setScoreXAction())\r\n  }\r\n\r\n  const scoreO = useSelector((state) => state.score.scoreO)\r\n  const setScoreO = () => {\r\n    dispatch(setScoreOAction())\r\n  }\r\n\r\n  let aiPlayer,\r\n    humanPlayer = undefined\r\n\r\n  if (xIsRun) {\r\n    aiPlayer = 'O'\r\n    humanPlayer = 'X'\r\n  } else {\r\n    aiPlayer = 'X'\r\n    humanPlayer = 'O'\r\n  }\r\n\r\n  let fieldWithIndex = [...field]\r\n  for (let i = 0; i < fieldWithIndex.length; i++) {\r\n    if (fieldWithIndex[i] === null) {\r\n      fieldWithIndex[i] = i\r\n    }\r\n  }\r\n\r\n  const checkWinner = (board, player) => {\r\n    if (\r\n      (board[0] === player && board[1] === player && board[2] === player) ||\r\n      (board[3] === player && board[4] === player && board[5] === player) ||\r\n      (board[6] === player && board[7] === player && board[8] === player) ||\r\n      (board[0] === player && board[3] === player && board[6] === player) ||\r\n      (board[1] === player && board[4] === player && board[7] === player) ||\r\n      (board[2] === player && board[5] === player && board[8] === player) ||\r\n      (board[0] === player && board[4] === player && board[8] === player) ||\r\n      (board[2] === player && board[4] === player && board[6] === player)\r\n    ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const findEmptyCells = (board) => {\r\n    return board.filter((s) => s != 'O' && s != 'X')\r\n  }\r\n\r\n  let winner = null\r\n  if (checkWinner(field, aiPlayer)) {\r\n    winner = aiPlayer\r\n  } else if (checkWinner(field, humanPlayer)) {\r\n    winner = humanPlayer\r\n  }\r\n\r\n  // set random AI first turn\r\n  if (!xIsRun && isAgainstTheComputer && turn.length === 0) {\r\n    const computerRandomTurn = Math.floor(Math.random() * 9)\r\n    setField(aiPlayer, computerRandomTurn)\r\n\r\n    const fieldCopy = [...field]\r\n    const newTurn = turn\r\n    newTurn.push(fieldCopy[computerRandomTurn])\r\n    setTurn(newTurn)\r\n  }\r\n\r\n  const changeTheScore = () => {\r\n    if (winner === 'X') {\r\n      setScoreX()\r\n    } else if (winner === 'O') {\r\n      setScoreO()\r\n    }\r\n    if (turn.length === 9 && !winner) {\r\n      setScoreDraw()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    changeTheScore()\r\n  }, [turn.length, winner])\r\n\r\n  const handleClick = (index) => {\r\n    const fieldCopy = [...field]\r\n    // ?game-over, ?click\r\n    if (winner || fieldCopy[index]) {\r\n      return null\r\n    }\r\n    // X ? Y\r\n    let player = xIsRun ? 'X' : 'O'\r\n    // update state\r\n    setField(player, index)\r\n    setxIsRun(!xIsRun)\r\n\r\n    const newTurn = turn\r\n    newTurn.push(fieldCopy[index])\r\n    setTurn(newTurn)\r\n  }\r\n\r\n  const computerTurn = (fieldAfterPlayer) => {\r\n    let fieldCopy = [...fieldAfterPlayer]\r\n    let newTurn = turn\r\n\r\n    fieldWithIndex = [...fieldCopy]\r\n    for (let i = 0; i < fieldCopy.length; i++) {\r\n      if (fieldCopy[i] === null) {\r\n        fieldWithIndex[i] = i\r\n      }\r\n    }\r\n\r\n    let bestMove = searchAlgorithm(fieldWithIndex, aiPlayer)\r\n    if (winner || fieldCopy[bestMove.idx]) return null\r\n\r\n    fieldCopy[bestMove.idx] = !xIsRun ? 'X' : 'O'\r\n    setField(aiPlayer, bestMove.idx)\r\n    newTurn.push(fieldCopy[bestMove.idx])\r\n    setTurn(newTurn)\r\n  }\r\n\r\n  const playerTurn = (index) => {\r\n    let fieldCopy = [...field]\r\n    let newTurn = turn\r\n    // ?game-over, ?click\r\n    if (winner || fieldCopy[index]) return null\r\n    // X ? Y\r\n    fieldCopy[index] = xIsRun ? 'X' : 'O'\r\n    setField(humanPlayer, index)\r\n    newTurn.push(fieldCopy[index])\r\n    setTurn(newTurn)\r\n\r\n    if (newTurn.length === 9) {\r\n      if (winner) {\r\n        return null\r\n      }\r\n    } else {\r\n      computerTurn(fieldCopy)\r\n    }\r\n  }\r\n\r\n  const searchAlgorithm = (board, player) => {\r\n    const emptyCells = findEmptyCells(board)\r\n    if (checkWinner(board, humanPlayer)) {\r\n      return { score: -1 }\r\n    } else if (checkWinner(board, aiPlayer)) {\r\n      return { score: 1 }\r\n    } else if (emptyCells.length === 0) {\r\n      return { score: 0 }\r\n    }\r\n\r\n    let moves = []\r\n\r\n    for (let i = 0; i < emptyCells.length; i++) {\r\n      let move = []\r\n      board[emptyCells[i]] = player\r\n      move.idx = emptyCells[i]\r\n      if (player === humanPlayer) {\r\n        const payload = searchAlgorithm(board, aiPlayer)\r\n        move.score = payload.score\r\n      }\r\n      if (player === aiPlayer) {\r\n        const payload = searchAlgorithm(board, humanPlayer)\r\n        move.score = payload.score\r\n      }\r\n      board[emptyCells[i]] = move.idx\r\n      moves.push(move)\r\n    }\r\n\r\n    let bestMove = null\r\n\r\n    if (player === aiPlayer) {\r\n      let bestScore = -Infinity\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    } else {\r\n      let bestScore = Infinity\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score\r\n          bestMove = i\r\n        }\r\n      }\r\n    }\r\n\r\n    return moves[bestMove]\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      <div className=\"score\">\r\n        <div className=\"score_descr\">\r\n          <div>X</div>\r\n          <div>Draw</div>\r\n          <div>O</div>\r\n        </div>\r\n        <div className=\"score_item\">\r\n          <div>{scoreX}</div>\r\n          <div>{scoreDraw}</div>\r\n          <div>{scoreO}</div>\r\n        </div>\r\n      </div>\r\n      <button className=\"start-game__btn\" onClick={() => startNewGame()}>\r\n        Start New Game\r\n      </button>\r\n      <Field\r\n        cells={field}\r\n        handleClick={isAgainstTheComputer ? playerTurn : handleClick}\r\n      />\r\n      <p className=\"field__info\">\r\n        {winner\r\n          ? `${winner} is the winner!`\r\n          : turn.length === 9\r\n            ? 'Draw!'\r\n            : `Your turn: ${xIsRun ? 'X' : 'O'}`}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './Menu.css'\r\n\r\nimport {\r\n  setIsAgainstTheComputerAction,\r\n  setMenuActiveAction,\r\n  setxIsRunMenuAction,\r\n  setTurnAction,\r\n  setxIsRunAction,\r\n} from '../../store/reducers/settingsReducer'\r\n\r\nimport { resetScoreAction } from '../../store/reducers/scoreReducer'\r\nimport { startNewGameAction } from '../../store/reducers/fieldReducer'\r\n\r\nconst Menu = ({ disabledInput }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const turn = useSelector((state) => state.settings.turn)\r\n\r\n  const isAgainstTheComputer = useSelector(\r\n    (state) => state.settings.isAgainstTheComputer\r\n  )\r\n  const setIsAgainstTheComputer = (payload) => {\r\n    dispatch(setIsAgainstTheComputerAction(payload))\r\n  }\r\n  const setMenuActive = (payload) => {\r\n    dispatch(setMenuActiveAction(payload))\r\n  }\r\n\r\n  const xIsRunMenu = useSelector((state) => state.settings.xIsRunMenu)\r\n  const setxIsRunMenu = (payload) => {\r\n    dispatch(setxIsRunMenuAction(payload))\r\n  }\r\n\r\n  const setxIsRun = (payload) => {\r\n    dispatch(setxIsRunAction(payload))\r\n  }\r\n  const setTurn = (payload) => {\r\n    dispatch(setTurnAction(payload))\r\n  }\r\n\r\n  const resetScore = () => {\r\n    dispatch(resetScoreAction())\r\n  }\r\n\r\n  const startNewGame = () => {\r\n    setxIsRun(xIsRunMenu)\r\n    setTurn([])\r\n    dispatch(startNewGameAction())\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"close-menu__btn\" onClick={() => setMenuActive(false)}>\r\n        X\r\n      </div>\r\n      <div className=\"main-menu__content\">\r\n        <div className=\"title\">\r\n          <h1>Tic Tac Toe Settings</h1>\r\n        </div>\r\n        {disabledInput ? (\r\n          <div className=\"apply-changes\">\r\n            Please, start a new game to change the settings\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <div className=\"content-item chekbox-content__item\">\r\n          <label htmlFor=\"computerTurn\">Player VS Bot: </label>\r\n          <input\r\n            id=\"computerTurn\"\r\n            type=\"checkbox\"\r\n            disabled={disabledInput}\r\n            checked={isAgainstTheComputer}\r\n            onChange={(e) => {\r\n              setIsAgainstTheComputer(e.target.checked)\r\n              setTurn([])\r\n              resetScore()\r\n              startNewGame()\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"content-item chekbox-content__item\">\r\n          <label htmlFor=\"xIsRun\">X runs first: </label>\r\n          <input\r\n            className=\"chekbox-content__item\"\r\n            id=\"xIsRun\"\r\n            type=\"checkbox\"\r\n            disabled={disabledInput}\r\n            checked={xIsRunMenu}\r\n            onChange={(e) => {\r\n              setxIsRunMenu(e.target.checked)\r\n              setxIsRun(e.target.checked)\r\n              resetScore()\r\n            }}\r\n            onClick={() => (turn.length === 1 ? startNewGame() : null)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './App.css'\n\nimport Game from './components/Game/Game'\nimport Menu from './components/Menu/Menu'\n\nimport { setMenuActiveAction } from './store/reducers/settingsReducer'\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  const menuActive = useSelector((state) => state.settings.menuActive)\n  const setMenuActive = (payload) => {\n    dispatch(setMenuActiveAction(payload))\n  }\n\n  const turn = useSelector((state) => state.settings.turn)\n  const xIsRun = useSelector((state) => state.settings.xIsRun)\n  const isAgainstTheComputer = useSelector(\n    (state) => state.settings.isAgainstTheComputer\n  )\n\n  let disabledInput = false\n  if (turn.length >= 1) {\n    disabledInput = true\n  } else {\n    disabledInput = false\n  }\n  if (turn.length === 1 && isAgainstTheComputer && !xIsRun) {\n    disabledInput = false\n  }\n\n  return (\n    <div className=\"main-page\">\n      <div\n        className=\"menu__settings-logo\"\n        onClick={() => setMenuActive(!menuActive)}\n      >\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Windows_Settings_app_icon.png/768px-Windows_Settings_app_icon.png\"\n          alt=\"\"\n        />\n      </div>\n      <div className={menuActive ? 'main-menu active' : 'main-menu'}>\n        <Menu disabledInput={disabledInput} />\n      </div>\n      <Game disabledInput={disabledInput} />\n    </div>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\n\r\nimport { scoreReducer } from './scoreReducer'\r\nimport { settingsReducer } from './settingsReducer'\r\nimport { fieldReducer } from './fieldReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  score: scoreReducer,\r\n  settings: settingsReducer,\r\n  field: fieldReducer,\r\n})\r\n","import { createStore } from 'redux'\r\nimport { rootReducer } from './reducers/rootReducer'\r\n\r\nexport const store = createStore(rootReducer)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}